from flask import Flask, jsonify, request, redirect, url_for, session
import psycopg2
import hashlib
from psycopg2.extras import RealDictCursor
 
 
 
 
app = Flask(__name__)
app.config['SECRET_KEY'] = 'leadershipboard'  
 
 
 
 
def db_conn():
    conn = psycopg2.connect(database="LeaderShipBoard", host="localhost", user="postgres", password="postgres", port="5432")
    return conn
 
 
conn = db_conn()
cur = conn.cursor()
 
# -------------------------------------------------------------------login--------------------------------------------------------------
 
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
 
    # hashed_password = hashlib.sha256(password.encode()).hexdigest()
 
    query = "SELECT login_id, username, roll FROM login WHERE username = %s AND password = %s"
 
    try:
        with db_conn() as conn, conn.cursor() as cur:
            cur.execute(query, (username, password))
            user = cur.fetchone()
 
        if user:
            session['login_id'] = user[0]
            session['username'] = user[1]
            session['roll'] = user[2]
 
            if user[2] == 'admin':
                return redirect(url_for('admin'))
            elif user[2] == 'student':
                return redirect(url_for('student'))
            else:
                return jsonify({'error': 'Invalid role'}), 401
        else:
            return jsonify({'error': 'Invalid credentials'}), 401
 
    except Exception as e:
        return jsonify({'error': str(e)}), 500
 
@app.route('/admin')
def admin():
    if 'login_id' in session and 'roll' in session and session['roll'] == 'admin':
        # User is authenticated as admin
        return jsonify({'message': 'Welcome to the admin portal, ' + session['username']})
    else:
        return redirect(url_for('login'))
 
@app.route('/student')
def student():
    if 'login_id' in session and 'roll' in session and session['roll'] == 'student':
        # User is authenticated as student
        return jsonify({'message': 'Welcome to the student portal, ' + session['username']})
    else:
        return redirect(url_for('login'))
    
 
@app.route('/logout')
def logout():
    session.pop('login_id', None)
    session.pop('username', None)
    session.pop('roll', None)
 
    return jsonify({'message': 'Logout successful'})
 
 
 
 

 
if __name__ == '__main__':
    app.run(debug=True)
 